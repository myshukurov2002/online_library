package com.company.auth.services;import com.company.auth.dtos.JwtResponse;import com.company.auth.entities.EmailHistoryEntity;import com.company.auth.repositories.EmailHistoryRepository;import com.company.auth.utils.htmlUtil;import com.company.base.ApiResponse;import com.company.config.i18n.MessageService;import com.company.config.security.utils.jwtUtil;import com.company.expections.exp.AppBadRequestException;import com.company.expections.exp.ItemNotFoundException;import com.company.user.entities.UserEntity;import com.company.user.enums.Role;import com.company.user.enums.Status;import com.company.user.repositories.UserRepository;import jakarta.mail.MessagingException;import jakarta.mail.internet.MimeMessage;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import lombok.Setter;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Service;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Setter@Service@Slf4j@RequiredArgsConstructorpublic class EmailSenderService {    private final JavaMailSender javaMailSender;    private final UserRepository profileRepository;    private final EmailHistoryRepository emailHistoryRepository;    private final UserRepository userRepository;    @Value("${server.url}")    private String SERVER_URL;    @Value("${spring.mail.username}")    private String FROM;    private final MessageService messageService;    void sendMimeEmail(String toAccount, String subject, String text) {        try {            MimeMessage msg = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(msg, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            msg.setFrom(FROM);            helper.setTo(toAccount);            helper.setSubject(subject);            helper.setText(text, true);            javaMailSender.send(msg);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    @Transactional(rollbackOn = Exception.class)    public ApiResponse<?> sendEmailVerification(String toAccount) {        UserEntity user = userRepository                .findByEmailAndVisibilityTrue(toAccount)                .orElseThrow(ItemNotFoundException::new);        ArrayList<Role> roles = new ArrayList<>(user.getRoles());        String jwt = jwtUtil.encode(user.getId(), roles);        String url = SERVER_URL + "/api/v1/auth/verification/email/" + jwt;        log.info("send verification " + toAccount);        ExecutorService executor = Executors.newSingleThreadExecutor();        executor.submit(() -> {            sendMimeEmail(toAccount, "Library.com VERIFICATION", htmlUtil.getRegistrationButton(url));            EmailHistoryEntity entity = new EmailHistoryEntity();            entity.setEmail(toAccount);            entity.setMessage(url);            emailHistoryRepository.save(entity);            executor.shutdown();        });        return new ApiResponse<>(true, messageService.getMessage("success.send.verification") + "Confirm email verification");    }    public ApiResponse<?> emailVerification(String jwt) {        JwtResponse response = jwtUtil.decode(jwt);        UserEntity user = profileRepository                .findByIdAndVisibilityTrue(response.id())                .orElseThrow(ItemNotFoundException::new);        if (!user.getStatus().equals(Status.REGISTRATION)) {            throw new AppBadRequestException("Wrong status");        }        sendResponse(user.getEmail());        user.setStatus(Status.ACTIVE);        profileRepository.save(user); // update        return new ApiResponse<>(true, "Registration completed!");    }    public void sendResponse(String toEmail) {        try {            MimeMessage message = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, StandardCharsets.UTF_8.name());            helper.setTo(toEmail);            helper.setSubject("Registration email");            helper.setText(htmlUtil.getResponse(), true);            javaMailSender.send(message);            System.out.println("SUCCESS SENT TO " + toEmail);        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }}